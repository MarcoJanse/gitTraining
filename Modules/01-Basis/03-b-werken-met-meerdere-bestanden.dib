#!meta

{"kernelInfo":{"defaultKernelName":"pwsh","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

# Git basis - 03 - werken met meerdere bestanden

#!markdown

## Inleiding

#!markdown

In de vorige les hebben we commits gemaakt met Ã©Ã©n bestand.  
In deze les leer je hoe je met **meerdere bestanden tegelijk** kunt werken, hoe je commits per bestand kunt bekijken, en hoe je overzicht houdt met `git diff` en `git log`.  
We sluiten af met een aantal visuele samenvattingen in Mermaid-diagrammen.

#!markdown

## Oefening 1: Meerdere bestanden maken

#!pwsh

# Zorg dat je in de juiste map zit
Set-Location -Path 'C:\GitTraining' | Out-String

# Maak meerdere nieuwe bestanden aan
New-Item -Path 'C:\GitTraining' -ItemType File -Name 'index.html' | Out-String
New-Item -Path 'C:\GitTraining' -ItemType File -Name 'app.js' | Out-String
New-Item -Path 'C:\GitTraining' -ItemType File -Name 'style.css' | Out-String

#!markdown

Controleer de status om te zien wat git herkent.

#!pwsh

git status

#!markdown

ğŸ‘‰ Je ziet nu meerdere *untracked files*.  
We kunnen ze allemaal toevoegen of juist Ã©Ã©n voor Ã©Ã©n.

#!markdown

## Oefening 2: Alle gewijzigde bestanden in Ã©Ã©n keer stagen

#!markdown

Met een punt `.` geef je aan dat **alle gewijzigde bestanden in de huidige directory** gestaged moeten worden.

#!pwsh

git add .

git status

#!markdown

ğŸ‘‰ Hiermee voeg je alles toe.  
Dit is handig, maar kan onpraktisch zijn als je niet alles wilt committen of de bestanden geen directe relatie met elkaar hebben.
Daarom kun je ook specifieke bestanden toevoegen.

#!markdown

## Oefening 3: Specifieke bestanden stagen

#!pwsh

# Reset eerst de staging area
git reset

# Voeg alleen index.html toe
git add index.html

git status

#!markdown

ğŸ‘‰ Alleen `index.html` staat nu in de staging area.  
Zo kun je selectief kiezen wat je commit.

#!markdown

## Oefening 4: Commit maken met meerdere bestanden

Stel je wilt nu **alle drie de bestanden** samen in Ã©Ã©n commit opnemen:

#!pwsh

git add index.html app.js style.css
git commit -m "Basisbestanden toegevoegd: HTML, JS en CSS"

#!markdown

ğŸ‘‰ Deze commit bevat meerdere bestanden tegelijk.

#!markdown

## Oefening 5: Diff per bestand en diff totaal

#!markdown

Je kunt verschillen per bestand bekijken of in Ã©Ã©n overzicht.

- Per bestand:
```bash
git diff HEAD~1 index.html
```

- Alle wijzigingen in Ã©Ã©n overzicht:
```bash
git diff HEAD~1
```

Probeer beide varianten uit en bekijk de verschillen.

#!markdown

## Samenvatting in grafieken

#!markdown

### Git proces flow (edit â†’ stage â†’ commit)

```mermaid
flowchart LR
  A[Working Directory] -- git add --> B[Staging Area]
  B -- git commit --> C[(Repository)]
```

### Commit historie met meerdere bestanden

```mermaid
gitGraph
  commit id: "c1" tag: "Commit 1"
  commit id: "c2" tag: "Commit 2"
  commit id: "c3" tag: "Commit 3 (meerdere bestanden)"
```

ğŸ‘‰ In commit `c3` zitten meerdere bestanden (bijv. index.html, app.js, style.css).

#!markdown

## === Einde les 3 ===
