#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

# Git basis - 02 - eerste commits

#!markdown

## Inleiding 

#!markdown

In de vorige les hebben we een repository geÃ¯nitialiseerd en kennisgemaakt met `git status`.  
In deze les gaan we verder met de eerste *echte handelingen* in git: bestanden toevoegen, commits maken, en kijken naar de commitgeschiedenis.  

#!markdown

## Oefening 1: Een bestand aanmaken

#!markdown

We beginnen met een leeg bestand dat we in git gaan opslaan.

#!pwsh

# Zorg dat je in de juiste map zit
Set-Location -Path 'C:\GitTraining' | Out-String

#!pwsh

# Maak een nieuw bestand aan
New-Item -Path 'C:\GitTraining' -ItemType File -Name 'readme.txt' | Out-String

#!markdown

Controleer of het bestand bestaat:

#!pwsh

Get-ChildItem -Path 'C:\GitTraining' | Out-String

#!markdown

## Oefening 2: Status controleren

#!markdown

Voer opnieuw `git status` uit om te zien wat git herkent als wijziging:

#!pwsh

git status

#!markdown

ðŸ‘‰ Je ziet dat er een *untracked file* is: `readme.txt`.  
Dit betekent dat git het bestand wel ziet, maar nog niet volgt.

#!markdown

## Oefening 3: Bestand toevoegen aan de staging area

#!markdown

Met `git add` vertel je git dat dit bestand onderdeel moet worden van de volgende commit. 

#!pwsh

git add readme.txt
git status

#!markdown

Na `git add` zie je dat het bestand in de **staging area** staat en klaar is om te committen.

#!markdown

## Oefening 4: Commits

#!markdown

Met `git commit` leg je de huidige status van de bestanden in de staging area vast in de repository.

### Configuratie: Git user name en email

Voordat je commits kunt maken, moet Git weten *wie* de auteur van de commits is.  
Dit stel je Ã©Ã©nmalig in met `git config`.

Je kunt dit globaal doen (voor al je repositories) door de `--global` parameter mee te geven, of per repo in te stellen.

```bash
git config --global user.name "Jouw Naam"
git config --global user.email "jouw@email.com"
```

> **Terminal oefening**
>
> Doe bovenstaande opdracht in je terminal, aangezien de username en user email instellingen bij iedereen uniek zijn.

#!markdown

Controleer daarna of de instellingen goed zijn gezet:

#!pwsh

git config --global --list

#!markdown

ðŸ‘‰ Deze configuratie wordt opgeslagen in je gebruikersprofiel en geldt voor al je projecten.  
Wil je voor een specifieke repository een andere naam of e-mail, gebruik dan dezelfde commandoâ€™s maar zonder `--global`.

#!markdown

### Je eerste commit maken

Nu is het tijd om je eerste commit te maken

#!pwsh

git commit -m "Eerste commit: readme.txt toegevoegd" | Out-String

#!markdown

ðŸ‘‰ Een commit heeft altijd een **commit message**.  
Deze beschrijft kort *wat* je hebt gedaan.  
Probeer commit messages altijd duidelijk en beknopt te houden.

#!markdown

## Oefening 5: Commit geschiedenis bekijken

#!markdown

Met `git log` kun je de commit geschiedenis bekijken.

#!pwsh

git log

#!markdown

Je ziet nu een lijst met commits (waarschijnlijk nog maar Ã©Ã©n ðŸ˜‰).  

#!markdown

## Oefening 6: Een wijziging maken en vergelijken

#!markdown

Laten we de `readme.txt` aanpassen en zien hoe git dit detecteert.

#!pwsh

# Voeg een regel toe in het bestand
Add-Content -Path 'C:\GitTraining\readme.txt' -Value "Dit is mijn eerste git repository."

#!markdown

Controleer hierna wederom de status met `git status`

#!pwsh

git status

#!markdown

ðŸ‘‰ Het bestand staat nu als **modified**. en als wijziging gemarkeerd die commit kan worden.
Voordat we een commit doen, kun je het verschil bekijken met `git diff`.

#!pwsh

git diff

#!markdown

De `git diff` laat precies zien wat er veranderd is in je bestand(en).  
Als je akkoord bent met deze wijzigingen kun je de wijziging committen met de volgende commando's:

`git add <bestandsnaam>`

  - Dit commando staged een bestand. Hiermee zet je Ã©Ã©n of meerdere bestanden klaar om te committen.

#!pwsh

git add .\readme.txt

#!markdown

Kijk hierna weer naar de status om steeds het verschil te zien in fases

#!pwsh

git status

#!markdown

`git commit -m "omschrijving"`
  
  - Dit commando doet de daadwerkelijke commit waarbij je de wijzigingen registreert in git. Wie heeft de wijzigingen gedaan en wanneer en wat is de omschrijving van die wijziging:

#!pwsh

git commit -m "Readme voorzien van eerste tekst"

#!markdown

Controleer nu de status

#!pwsh

git status

#!markdown

Je zult nu zien dat er niets te doen is volgens git. Alles is gecommit en opgeslagen qua wijzigingen.

Controleer vervolgens de logfile weer.

#!csharp

git log

#!markdown

Je krijgt dan een overzicht van alle commits met commit ID, auteur, datum en omschrijving.
Dit kan snel onoverzichtelijk worden met veel commits in je branch. 

**Tip:** Gebruik `git log --oneline` voor een overzicht van alle commits per regel.

#!pwsh

git log --oneline

#!markdown

Laten we nu nog twee commits maken voor nog een paar wijzigingen en ook steeds kijken waar de HEAD zich bevind

#!pwsh

# Voeg nog een regel toe in het bestand
Add-Content -Path 'C:\GitTraining\readme.txt' -Value "Dit is een tweede regel in het bestand in een aparte commit"

git add .\readme.txt
git commit -m "Tweede regel toegevoegd aan readme"

#!markdown

We gaan nu de derde wijziging maken door met notepad wijzigingen te maken aan het document en bestaande tekst te wijzigen en een stuk tekst toe te voegen in dezelfde commit en kijken hoe dit eruit ziet.

#!pwsh

notepad 'C:\GitTraining\readme.txt'

#!markdown

Pas hier de eerste regel aan met wat andere tekst en voeg wat tekst toe op het einde.

Mocht je geen inspiratie hebben voor het toevoegen van tekst kun je onderstaande erin plakken:

```text
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. 
Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. 
Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

   

```

> Ik heb express wat spaties en lege regels toegevoegd voor een demonstratie van de git diff

Bekijk nu de git status en doe vervolgens een `git diff`. Wat zie je?

#!pwsh

git status

#!pwsh

git diff 

#!markdown

Stage deze wijzigingen weer en commit ze.

#!pwsh

git add .\readme.txt
git commit -m "Wijzigingen en toevoegingen in readme"

#!markdown

## === Einde les 2 ===
