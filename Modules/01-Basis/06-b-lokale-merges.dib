#!meta

{"kernelInfo":{"defaultKernelName":"pwsh","items":[{"name":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

# Git basis - 06 - Lokale merges

#!markdown

## Inleiding

#!markdown

Je leert **branches samenvoegen** (mergen). We behandelen het verschil tussen **fast-forward** en een **merge commit**.  
Gebruik `git log --oneline --decorate` om voor en na te vergelijken.

#!markdown

## Merges

#!markdown

### Voorbeeldsituatie (referentie)

We gebruiken deze voorbeeldrepository:

- Basistak (waar je in merge’t), bv. main
- Te mergen tak (feature-branch)
- De feature-branch is gemaakt op commit 2 en bevat 1,2,A,B,C
- De basistak heeft daarna 3,4,5 gekregen. 

#### Startpunt (schets):

```mermaid
flowchart LR
  1((1)) --> 2((2)) --> 3((3)) --> 4((4)) --> 5((5))
  2 --> A((A)) --> B((B)) --> C((C))
```

#### Standaard merge (no-ff)

Een standaard merge neemt elke commit van de te mergen branch en voegt die toe aan de geschiedenis van de basistak op basis van hun tijdstempel. Er komt ook een merge-commit bij (een “lege” commit die het merge-moment markeert). Dit heet ook wel no fast-forward (--no-ff). 
pr0mpt.com

Visualisatie:

```mermaid
flowchart LR
  C1((1)) --> C2((2)) --> C3((3)) --> C4((4)) --> C5((5)) --> M((merge))
  C2 --> A((A)) --> B((B)) --> C((C)) --> M
```

- Voordelen (kort): rijke, contextvolle historie; je ziet precies wanneer branches ontstonden en wat erin zat.
- Nadelen: extra merge-commits kunnen “rommelig” ogen; het terugdraaien van een set changes kan verwarrend zijn. 


**Voorbeeldcommando’s:**

- `git checkout main`
- `git merge --no-ff feature`


#### Fast-forward merge

Als de basistak geen nieuwe commits heeft sinds de feature-branch afsplitsing, kan Git een fast-forward doen: de branchpointer schuift vooruit, zonder merge-commit. Het lijkt dan alsof de commits rechtstreeks op de basistak gemaakt zijn. 
pr0mpt.com

Visualisatie (lineair):

```mermaid
flowchart LR
  1((1)) --> 2((2)) --> A((A)) --> B((B)) --> C((C))
```

- Voordelen: zeer schone, lineaire historie; geen verlies aan detail.
- Nadelen: kan de “branching-context” verhullen; werkt alleen als de basistak niet doorliep. 

Voorbeeldcommando:


- `git checkout main`
- `git merge --ff-only feature`


#### Rebase and merge

Rebase + merge verplaatst het startpunt van de feature-branch naar de laatste commit van de basistak en speelt daarna A,B,C erbovenop af. Je krijgt zo een lineaire geschiedenis, ook al had de basistak nieuwe commits. Het uiteindelijke mergen is daarna vaak een fast-forward. 

Visualisatie (lineair na rebase):

```mermaid
flowchart LR
  1((1)) --> 2((2)) --> 3((3)) --> 4((4)) --> 5((5)) --> A((A')) --> B((B')) --> C((C'))
```

- Voordelen: lineaire geschiedenis met behoud van commit-granulariteit.
- Nadelen: kan opnieuw nodig zijn als de basistak wéér verandert; minder zichtbaar wanneer de branch bestond; herkomst per PR/branch kan minder duidelijk zijn. 


Voorbeeldcommando’s:

- `git checkout feature`
- `git rebase main`
- `git checkout main`
- `git merge feature`

#!markdown

## Oefening 1: Fast-forward merge

#!pwsh

# Zorg dat je op main zit
git switch main

# Maak een branch en commit daar iets
git switch -c feature-a
Add-Content -Path 'C:\GitTraining\feature-a.txt' -Value "Feature A - start"
git add feature-a.txt
git commit -m "Feature A: start"

# Terug naar main en merge (fast-forward)
git switch main
git merge feature-a

#!markdown

### Visualisatie (fast-forward)
```mermaid
flowchart LR
  C1[C1] --> C2[C2] --> A1[Feature A: start]
```

#!markdown

## Oefening 2: Merge met divergerende geschiedenis (merge commit)

#!pwsh

# Maak nieuwe branch en commit
git switch -c feature-b
Add-Content -Path 'C:\GitTraining\feature-b.txt' -Value "Feature B - start"
git add feature-b.txt
git commit -m "Feature B: start"

# Terug naar main en maak ook een commit op main
git switch main
Add-Content -Path 'C:\GitTraining\readme.txt' -Value "Regel op main"
git add readme.txt
git commit -m "Main: extra regel"

# Merge feature-b in main (maakt merge commit)
git merge feature-b

#!markdown

### Visualisatie (merge commit)
```mermaid
flowchart LR
  subgraph main
    M1[C1] --> M2[C2] --> M3[Main: extra regel]
  end
  subgraph feature-b
    FB1[Feature B: start]
  end
  FB1 --> M3
```

#!markdown

## Oefening 3: Merge controleren en eventueel zonder fast-forward

#!markdown

- Controleer `git log --oneline --decorate` om te zien wat er is gebeurd.  
- Optioneel: gebruik `git merge --no-ff <branch>` om **altijd** een merge commit te forceren (handig voor audittrail).

#!markdown

## Samenvatting gebruikte Git-commando's

#!markdown

| Commando | Uitleg |
|----------|--------|
| `git switch <branch>` | Schakel van branch. |
| `git switch -c <branch>` | Maak en schakel naar nieuwe branch. |
| `git merge <branch>` | Voeg de opgegeven branch samen in de huidige branch. |
| `git merge --no-ff <branch>` | Forceer een merge commit ook bij fast-forward. |
| `git log --oneline --decorate` | Vergelijk historie voor/na de merge. |
| `git add <bestand>` | Stage wijzigingen. |
| `git commit -m "bericht"` | Commit wijzigingen (ook de merge-resolutie). |

#!markdown

## Praktijkopdracht

#!markdown

1.  Fast-forward merge
    1.  Maak een nieuwe branch vanaf main.
    2. Voeg een bestand toe of wijzig iets, en commit dit.
    3. Ga terug naar main en merge de branch.
    4. Observeer dat dit een fast-forward merge is (geen merge commit, de branchpointer schuift gewoon vooruit).
 2. Merge met een merge commit
    1. Maak opnieuw een branch vanaf main.
    2. Doe op de branch een commit (bijv. een bestand toevoegen).
    3. Doe ook op main een andere commit.
    4. Merge de branch in main
    5. Observeer dat dit een merge commit oplevert.
3.  Optioneel: geforceerde merge commit
    1.  Maak een branch, doe commits.
    2.  Merge in main met git merge --no-ff <branch>.
    3.  Observeer dat er altijd een merge commit ontstaat, zelfs als fast-forward mogelijk was.

### Extra

4. Conflicten (optioneel als extra uitdaging)
   1. Maak twee branches van dezelfde commit.
   2. Pas in beide branches hetzelfde bestand en dezelfde regel aan.
   3. Merge ze samen en los het conflict handmatig op.

#!markdown

## _Einde les 06_
